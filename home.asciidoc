= Mintduino Project

== The Big Project

The MintDuino is deceiving - this little tin of electronics is capable of providing the brains of an unlimited number of devices limited only by your imagination... and, of course, your bank account.

While the MintDuino is certainly capable of being used during a moment of inspiration, you'll find that the real power of the device comes when you sit down, figure out what you want to make, and then start tackling your project a bit at a time.  Anyone who has done circuit building or programming (or both) knows that it rarely pays to just start inserting components and writing complex sketches (programs in Arduino-speak).  When trouble arises in a circuit or a program, it can be a time-consuming process to track down the error... or more likely, errors... when you have too much complexity.
That's why it's always a good idea to break a project idea down into manageable components - let's call them sub-tasks.  If your big project has five major sub-tasks, then tackling sub-task 1 and building a slightly less complicated circuit along with a slightly less complicated sketch will save time and reduce stress.  Once you've got sub-task 1 figured out, you move on to sub-task 2.  By the time you've got all five sub-tasks built and their individual sketches tested, you're likely to have an increased chance of success when you pull them all together and build The Big Project. 

And that's exactly what you're going to do in this MintDuino Notebook.  You're going to be shown The Big Project... but you're not going to be allowed to build it just yet.  The Big project has sub-tasks, and you're going to first learn how to get the sub-tasks to work.  Once you've done that, well... then you'll be ready for the finale where you bring all you've learned together and tackle... The Big Project.
So...what is The Big Project?  Keep reading.
== The MintDuino Reflex Game

The MintDuino Reflex Game will test the reflexes of two players.  The game takes place on the small Mini-Breadboard, with each player waiting to push a button when an LED in the center of the breadboard lights up.  The central yellow LED will light up after a random amount of time has passed (something between say 5 and 10 seconds).  Whichever player pushes their button first after the central LED lights up wins and a green LED will light up on the side of the player who wins.  But a player can't simply push the button over and over before the LED lights up!  Pushing the button before the center LED lights up automatically gives the other player the win.

That's The Big Project, but let's break it down into four sub-tasks that will help us understand the proper wiring of the MintDuino and the electronics components and the programming elements required:

. Wire up and program the MintDuino to light an LED - this will help us to not only light the center yellow LED but also the winning player's green LED.
. Wire up and light an LED after a Random Wait Time- we will learn how to light an LED after waiting a random amount of time.
. Wire up and program an LED to light up when the pushbutton is pressed - this will help us to understand the proper wiring of a pushbutton as well as how to use it as a trigger for another event (lighting an LED in this case).
.  Wire and program two pushbuttons to light up a pushbutton's matching LED when pressed - Now we'll figure out how to trigger the correct LED when its paired pushbutton is pressed.

Once we understand what's required to light LEDs, wait a random amount of time, and test for pushbuttons to be pressed, we can pull it all together and build the MintDuino Reflex Game.  The fact that we'll have multiple LEDS shouldn't be a problem - if we know how to light one, well... we can light two... or three.  And if we know how to determine if a pushbutton has been pressed, we can probably figure out how to detect which of two pushbuttons has been pressed.  Then we add some code to start the game, check for a pre-mature button push, and reset the game... and we're in business.

====
This MintDuino Notebook will provide you with the sample code required to test various circuits and electronics components, but it will not be able to provide a comprehensive tutorial on programming the MintDuino (or an Arduino).  If you need a better understanding of the programming language used to create MintDuino sketches, you’ll want to turn to a variety of online and printed sources designed to teach beginning Arduino programming.  A few of these resources can be found at the end of this document.
====

=== Sub-Task 1: Light an LED
We’ll start with Sub-Task 1 and assemble a small circuit to light a single LED.  The components you will need include:

* 1 MintDuino - assembled [URL link to assembly instructions here]
* 1 LED (Yellow recommended, but any color will work)
* 1 9V battery
* 1 FTDI adapter [URL link here]
* 1 USB cable (A to mini-B type)

Plus, you'll need the following components, all of which are available in the http://www.makershed.com/ProductDetails.asp?ProductCode=MSTIN2[Mintronics: Survival Pack]:

* 1 Mini breadboard
* 1 9V battery connector
* 1 Resistor 100ohm (minimum)
* 2 Jumper Wires

<<Figure1>> shows the components required to assemble Sub-Task 1.  The FTDI Friend (or FTDI Adapter) will be used later to upload the program to the MintDuino.

[[Figure1]]
.Components required to assemble circuit for Sub-Task 1
image:figs/Figure1.jpg[width="scaledwidth=90%"]

We’ll start the assembly of Sub-Task 1 by inserting the LED and resistor into the mini breadboard as shown in <<Figure2>>.
 
[[Figure2]]
.Resistor and LED inserted into the motherboard. 
image:figs/Figure2.jpg[scaledwidth="90%"]

Before we continue, there are a few things you need to know when using the mini breadboard:

The mini breadboard does not have letters or numerals to label the various rows and columns (like the MintDuino’s breadboard).

When wiring, rotate the mini breadboard so that it is taller than it is wider (seen in Figure 2); with this orientation, each row is broken into two segments of five holes.

The file holes in each segment share a common connection point; when inserting components, make certain that leads are inserted in different segments and not in the same grouping of five holes or the component will be shorted.

Take notice also that the LED has one leg that is shorter than the other.  The longer leg is referred to as the anode, or + lead (positive) and the shorter leg is referred to as the cathode or – lead (negative).  When connecting an LED to a circuit, try to remember to connect the + lead to the voltage/supply side of a circuit and the – lead to the GND (ground) side of a circuit.

Because we haven’t wired up power to the MintDuino yet, just remember (or jot down a note here) where the longer (+) lead of the LED is located.

====
One useful way to always remember how an LED is inserted into the mini breadboard is to insert the longer (+) lead closer to the MintDuino.  If you try to be consistent using this method, you’ll always be able to look at an inserted LED and determine which lead is the anode and which is the cathode.
====

We’ve also inserted the resistor so that one of its leads shares a row with the cathode (-) lead of the LED.  Notice in <<Figure2>> that the resistor’s other lead is inserted into an empty row on the mini breadboard just below the LED’s anode lead.

Next, you’ll use two jumper wires to connect the mini breadboard to the MintDuino.  One jumper wire is inserted into the same row as the LED’s anode lead.  The other wire is inserted into the same row as the resistor’s non-shared lead (the lead not shared by the LED’s cathode lead).  This is shown in <<Figure3>>.

[[Figure3]]
.Two jumper wires will connect the mini breadboard to the MintDuino. 
image:figs/Figure3.jpg[scaledwidth="90%"]

Now you’ll connect the two jumper wires to the MintDuino.  If you’ve built your MintDuino based on the online building instructions found at [URL here] then you’ll want to connect the jumper wire sharing the LED’s anode lead to Pin 13 on the ATmega 328 chip.  This corresponds to Row 21 on the MintDuino (again, if you’ve taken care to wire it up exactly as the online instructions specify).  You can plug that jumper wire into any free hole on Row 21.

====
Pin 13 corresponds to Digital Pin 7 – this information will be required shortly when we write the program to test the LED.
====

Plug the other jumper wire into any hole on the GND column of the MintDuino.  Double-check this and make absolute certain that you’ve connected it to a GND column and not the PWR (5v or 3.3v) column.

<<Figure4>> shows the two jumper wires now connecting the mini breadboard to the MintDuino.

[[Figure4]]
.MintDuino and mini breadboard circuit completed with jumper wires. 
image:figs/Figure4.jpg[scaledwidth="90%"]

Now it’s time to upload the Sub-Task 1 program (sketch).  This sketch can be downloaded at [URL here] or you can simply open your Arduino IDE and enter the following sketch/code:

----
include::code/example1.pde[]
----

Add the FTDI Friend (FTDI Adapter) to your MintDuino as seen in <<Figure5>>.  You will need this to connect your computer to the MintDuino for uploading the sketch.

[[Figure5]]
.Add the FTDI Friend (Adapter) to the MintDuino and upload the sketch. 
image:figs/Figure5.jpg[scaledwidth="90%"]

After uploading the sketch to the MintDuino, leave the USB cable plugged into the FTDI/MintDuino and you should see a fast-flashing LED on the mini breadboard as shown in <<Figure6>>.

[[Figure6]]
.A flashing LED lets you know that the sketch is working.
image:figs/Figure6.jpg[scaledwidth="90%"]

Leave the circuit wired up as you’ll use it again with Sub-Task 2 but unplug the USB cable connecting the FTDI/MintDuino to your computer.

==== Troubleshooting Sub-Task 1
If the LED is not flashing, check to make certain that you set the Digital Pin to 7 in the sketch and that the jumper wire from the LED anode row is connected to Pin 13 on the ATmega328 chip on the MintDuino.  Also make certain that the jumper wire sharing a row with the resistor on the mini breadboard is connected to GND (ground) on the MintDuino’s breadboard.

If the jumper wires are properly connected to the MintDuino, check that you’ve properly inserted the LED (longer leg connected to Pin 13 via jumper wire).  You might also exchange the LED for another as a last resort.

Finally, go back and verify that the code uploaded properly to the MintDuino – if you don’t get a compiling error or any error message telling you the upload failed, you can be reasonably certain the sketch is loaded and the problem is likely a connection issue between components or a miswired circuit.

=== Sub-Task 2: Randomly Light an LED
Sub-Task 2 will use the same circuit you assembled for Sub-Task 1; we will simply make a change to the programming that will light up the LED after a random number of seconds has elapsed.  You can download the program for Sub-Task 2 at [URL here] or simply enter the code below into the Arduino IDE:

----
include::code/example2.pde[]
----

After up upload this sketch to the MintDuino, the following will occur:

. The Wait Time for the LED will be initialized with a value of 2000 milliseconds (2 seconds).
. A random seed will be generated using Analog Pin 1 and random noise from that unused pin.
. A loop will start and a random value between 0 and 5000 milliseconds will be added to the current Wait Time value of 2000 milliseconds.
. Three fast flashes occur, alerting game players to begin watching for the game LED to light.
. There will be a random pause (based on a value between 2000 and 7000 milliseconds).
. The LED will light and hold for two seconds.
. The LED will turn off and a five second delay will occur.
. The Wait Time is reset to a minimum of two seconds.
. The loop begins again with a random value between 0 and 5000 milliseconds) added to the reset Wait Time and three fast flashes of the LED.

As you can see, the beginnings of the MintDuino Reflex Game are starting to appear.  We have a random amount of time that will pass before the LED lights up – this is what the two players will be waiting to see before they push their buttons.

And buttons is what we need to learn how to use now.  We’ll next tackle Sub-Task 3 and learn how to light that LED by pressing a pushbutton.  Unplug the USB cable from the FTDI/MintDuino and make no changes to the wiring of the LED and resistor.

==== Troubleshooting Sub-Task 2
If you managed to get the LED to light in Sub-Task 1, then any problems you’ll likely have with Sub-Task 2 will exist in the program itself.  

If you’re not seeing the initial three quick flashes of the LED, check your code to make certain you’re not using the ledWait variable to control the on-and-off lighting.  If you’re not getting a random wait after the three initial flashes (for example, if the delay is always the same number of seconds), make certain you included the last bit of code that resets the ledWait variable to 2000.

=== Sub-Task 3: Light an LED with a Pushbutton
Sub-Task 3 will add to the same circuit you assembled for Sub-Tasks 1 and 2 by introducing the single pushbutton component to the mini breadboard, as seen in <<Figure7>>.

[[Figure7]]
.A single pushbutton that will light the LED when pressed.
image:figs/Figure7.jpg[scaledwidth="90%"]

Add the pushbutton to the mini breadboard by inserting it so that the distance between the two top legs is a single hole (on a single row) and the distance between a top and a bottom leg has two holes between it (spanning four rows altogether).  A closeup of this can be seen in <<Figure8>>.

[[Figure8]]
.The pushbutton is inserted into the mini breadboard a specific way.
image:figs/Figure8.jpg[scaledwidth="90%"]

<<Figure9>> shows the pushbutton inserted into the mini breadboard.  Make certain to leave the left-most hole open on the top and bottom row where the pushbutton is inserted.  (These will be used to add jumper wires.)

[[Figure9]]
.Leave an empty hole to the left of the top row and bottom row of the pushbutton. 
image:figs/Figure9.jpg[scaledwidth="90%"]

